
clear all


%Run DownloadCIFAR10 function to download CIFAR-10 dataset
%Run
% %% Prepare the CIFAR-10 dataset
% if ~exist('cifar10Train','dir')
%     disp('Saving the Images in folders. This might take some time...');    
%     saveCIFAR10AsFolderOfImages('cifar-10-batches-mat', pwd, true);
% end


%%%%%%%%%%%%%%%%%%%%%%%%%%%% data processing %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
categories = {'deer','dog','frog','cat','bird','automobile','horse','ship','truck','airplane'};

rootFolder = 'cifar10Test';
imds_test = imageDatastore(fullfile(rootFolder, categories), ...
    'LabelSource', 'foldernames');


 categories = {'deer','dog','frog','cat','bird','automobile','horse','ship','truck','airplane'};

rootFolder = 'cifar10Train';
imds = imageDatastore(fullfile(rootFolder, categories), ... 
    'LabelSource', 'foldernames');
 %%
%%%%%%%%%%%%%%%%%%%% IID dataset %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
[imds1,imds2,imds3,imds4,imds5,imds6,imds7,imds8,imds9,imds10,imds11,imds12,imds13,imds14,imds15,imds16] = splitEachLabel(imds, 0.0625,0.0625,0.0625,0.0625,0.0625,0.0625,0.0625,0.0625,0.0625,0.0625,0.0625,0.0625,0.0625,0.0625,0.0625);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%% Non IID dataset %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%[imds1,imds2,imds3,imds4,imds5,imds6,imds7,imds8,imds9,imds10] = GetUnbalancedCIFAR(rootFolder, ratio)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%save data imds1 imds2 imds3 imds4 imds5 imds6 imds7 imds8 imds9 imds10 imds11 imds12 imds13 imds14 imds15 imds16


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
% imds1 is the dataset of user 1. 
% Hay 16 subsets creados, 15 serán entrenados y 10 serán usados para
% actualizar el modelo global
% Recordar que  se escoje un batch de cada subset! 


averagenumber=1;  % Average number of runing simulations. 
iteration=300;     % Total number of global FL iterations.
number=0; %to keep truck of 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%% coding setting %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
varSize = 32; 
v_fQRate = [1, 2];
v_nQuantizaers   = [...          % Curves
    0 ...                   % Dithered 3-D lattice quantization 
    1 ...                   % Dithered 2-D lattice quantization    
    1 ...                   % Dithered scalar quantization      
    1 ...                   % QSGD 
    1 ...                   % Uniform quantization with random unitary rotation    
    1 ...                   % Subsampling with 3 bits quantizers
    ];

global gm_fGenMat2D;
global gm_fLattice2D;
% Clear lattices
gm_fGenMat2D = [];
gm_fLattice2D = [];
% Do full search over the lattice
stSettings.OptSearch = 1;

stSettings.type =2;
stSettings.scale=1;
s_fRate=4;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


finalerror=[];
averageerror=[];
kk=0;



%%%%%%%%%%%%%%%%%%%%%%%% Matrix size of local FL model %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

w1length=5*5*3*32;

w2length=5*5*32*32;

w3length=5*5*32*64;

w4length=64*576;

w5length=10*64;

b1length=32;

b2length=32;

b3length=64;

b4length=64;

b5length=10;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


P=1;
I=([0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15]-0.04)*0.001;
alpha=0.85;
RBnumber=length(I);




learningrate=0.008;




varSize = 32; 



usernumber=15;
proposed=1;
baseline1=0;
baseline2=0;
baseline3=0;




for userno=10:2:10    % Number of users.
    kk=kk+1;
    numberofuser=userno; 
    
    
for average=1:1:averagenumber

    probability4=[];
timea=[];
delay=[];
mi=[];    

d=[407.3618
  452.8960
   63.4934
  456.6879
  316.1796
   48.7702
  139.2491
  273.4408
  478.7534
  482.4443
   78.8065
  485.2964
  478.5835
  242.6878
  400.1402];   



%rand(usernumber,1)*500;    
%load('duserdata');

error=zeros(iteration,1);
    
    
    SINR=P*1*(d(1:usernumber,1).^(-2))./I;


rate=2*log2(1+SINR);

time=116906*32./rate/1024/1024; % how long it would take to transmit a certain amount of data.
   
    
gradient=zeros(usernumber,1);
wupdate=zeros(iteration,usernumber);   % local model for each user

%%%%%%%%%%%%% local model of each user%%%%%%%%%%%%%%%%%%%%%%%  
w1=[];
w2=[];
w3=[];
w4=[];
w5=[];
b1=[];
b2=[];
b3=[];
b4=[];
b5=[];
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

wnew=zeros(5,5,3,32,usernumber);
lwnew=zeros(5,5,32,32,usernumber);
bnew=zeros(5,5,32,64,usernumber);
obnew=zeros(64,576,usernumber);
fwnew=zeros(10,64,usernumber); %weights of the final fully connected layer 
% in the network, mapping 64 input features to 10 output classes



%%%%%%%%%%%%% gradient of local FL models %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
deviationw=[];
deviationlw=[];
deviationb=[];
deviationob=[];
deviationofw=[];
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%  Building local FL model of each user  %%%%%%%%%%%%%%%%%%%%%%%%%


layer = [
    imageInputLayer([varSize varSize 3]); %input layer with the size of the input images
    convolution2dLayer(5,varSize,'Padding',2,'BiasLearnRateFactor',2); %2D convolutional layer with 5x5 filters.
    maxPooling2dLayer(3,'Stride',2);
    reluLayer();
    convolution2dLayer(5,32,'Padding',2,'BiasLearnRateFactor',2);
    reluLayer();
    averagePooling2dLayer(3,'Stride',2);
    convolution2dLayer(5,64,'Padding',2,'BiasLearnRateFactor',2);
    reluLayer();
    averagePooling2dLayer(3,'Stride',2);
    fullyConnectedLayer(64,'BiasLearnRateFactor',2); 
    reluLayer();
    fullyConnectedLayer(length(categories),'BiasLearnRateFactor',2);
    softmaxLayer()
    classificationLayer()];

option = trainingOptions('adam', ...
    'LearnRateSchedule', 'piecewise', ...
    'LearnRateDropFactor', 0.2, ...
    'LearnRateDropPeriod', 8, ...
    'MaxEpochs', 1, ...
    'MiniBatchSize', 50, ...
    'ExecutionEnvironment','parallel',...
    'Verbose', true);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



kkkk=0;
for i=1:1:iteration
    
%%%%%%%%%%%%%%%%%%%%%%%Setting of local FL model %%%%%%%%%%%%%%%%%%%%%%%%%%   
%    if i==16



 

%     
%      elseif i==25
%         option = trainingOptions('sgdm', ...
%     'InitialLearnRate', 0.002, ...
%     'LearnRateSchedule', 'piecewise', ...
%     'LearnRateDropFactor', 0.1, ...
%     'LearnRateDropPeriod', 8, ...
%     'L2Regularization', 0.004, ...
%     'MaxEpochs', 1, ...
%     'MiniBatchSize', 60, ...
%     'Verbose', false);
%      elseif i==33
%         option = trainingOptions('sgdm', ...
%     'InitialLearnRate', 0.0005, ...
%     'LearnRateSchedule', 'piecewise', ...
%     'LearnRateDropFactor', 0.1, ...
%     'LearnRateDropPeriod', 8, ...
%     'L2Regularization', 0.004, ...
%     'MaxEpochs', 1, ...
%     'MiniBatchSize', 60, ...
%     'Verbose', false);
%      elseif i==39
%         option = trainingOptions('sgdm', ...
%     'InitialLearnRate', 0.0001, ...
%     'LearnRateSchedule', 'piecewise', ...
%     'LearnRateDropFactor', 0.1, ...
%     'LearnRateDropPeriod', 8, ...
%     'L2Regularization', 0.004, ...
%     'MaxEpochs', 1, ...
%     'MiniBatchSize', 60, ...
%     'Verbose', false);
%          elseif i==42
%         option = trainingOptions('sgdm', ...
%     'InitialLearnRate', 0.00005, ...
%     'LearnRateSchedule', 'piecewise', ...
%     'LearnRateDropFactor', 0.1, ...
%     'LearnRateDropPeriod', 8, ...
%     'L2Regularization', 0.004, ...
%     'MaxEpochs', 1, ...
%     'MiniBatchSize', 60, ...
%     'Verbose', false);
%    end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

for user=1:1:usernumber
       
    
           clear netvaluable;
    Winstr1=strcat('net',int2str(user));     
     midstr=strcat('imds',int2str(user)); 
     %creates a string that refers to the ImageDatastore specific to the current user.
     
    eval(['imdss','=',midstr,';']);
    % string as MATLAB code, assigning the user-specific ImageDatastore to the variable imdss
    % allows selecting the correct dataset for each user during the iteration.

if i>1
    
%     i ==1
%       layer(2).Weights=zeros(5,5,3,32);
% 
%     layer(5).Weights=zeros(5,5,32,32);
% 
%      layer(8).Weights=zeros(5,5,32,64);
%      layer(11).Weights=zeros(64,576);
%     layer(13).Weights=zeros(10,64); 
%      
%          layer(2).Bias=zeros(1,1,32);
% 
%     layer(5).Bias=zeros(1,1,32);
% 
%      layer(8).Bias=zeros(1,1,64);
%      layer(11).Bias=zeros(64,1);
%     layer(13).Bias=zeros(10,1);   
%     
% else

   % Let GLOBAL FL MODEDL to be the local FL model of each user, which is
   % equal to that the BS transmits the global FL model to the users  

   %e code updates the weights and biases of certain layers in the CNN
      layer(2).Weights=globalw1;

    layer(5).Weights=globalw2;

     layer(8).Weights=globalw3;
     layer(11).Weights=globalw4;
    layer(13).Weights=globalw5;   
     
         layer(2).Bias=globalb1;

    layer(5).Bias=globalb2;

     layer(8).Bias=globalb3;
     layer(11).Bias=globalb4;
    layer(13).Bias=globalb5;   
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end
       
      




[netvaluable, info] = trainNetwork(imdss, layer, option); % Train local FL model.
   % por red se refiere a una red neuronal entrenada, objeto Series Network


%%%%%%%%%%%%%%%%%%%calculate identification accuracy%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 labels = classify(netvaluable, imds_test);

% This could take a while if you are not using a GPU
% computes the confusion matrix from the true labels (imds_test.Labels) and the predicted labels (labels).
confMat = confusionmat(imds_test.Labels, labels);
confMat = confMat./sum(confMat,2);
error(i,1)=mean(diag(confMat))+error(i,1); % Here, error is identification accuracy.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%% global model for each user, which consists of 4 matrices  

if i==1    
    globalw1=zeros(5,5,3,32);
globalw2=zeros(5,5,32,32);
globalw3=zeros(5,5,32,64);
globalw4=zeros(64,576);
globalw5=zeros(10,64);

    globalb1=zeros(1,1,32);
globalb2=zeros(1,1,32);
globalb3=zeros(1,1,64);
globalb4=zeros(64,1);
globalb5=zeros(10,1);

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% Record trained local FL model.

w1(:,:,:,:,user)=netvaluable.Layers(2).Weights;

w2(:,:,:,:,user)=netvaluable.Layers(5).Weights;

     w3(:,:,:,:,user)=netvaluable.Layers(8).Weights;
    w4(:,:,user)=netvaluable.Layers(11).Weights;
w5(:,:,user)=netvaluable.Layers(13).Weights;
     
     
b1(:,:,:,user)=netvaluable.Layers(2).Bias;

b2(:,:,:,user)=netvaluable.Layers(5).Bias;

   b3(:,:,:,user)=netvaluable.Layers(8).Bias;
   b4(:,:,user)=netvaluable.Layers(11).Bias;
   b5(:,:,user)=netvaluable.Layers(13).Bias;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

     
    
%%%%%%%%%%%%% Calculate the gradient of local FL model of each user  %%%%%%%    

if i==1    
     
deviationw1all(:,:,:,:,user)= w1(:,:,:,:,user);
deviationw2all(:,:,:,:,user)=w2(:,:,:,:,user);
deviationw3all(:,:,:,:,user)= w3(:,:,:,:,user);
deviationw4all(:,:,user)=w4(:,:,user);
deviationw5all(:,:,user)=w5(:,:,user);

deviationb1all(:,:,:,user)=b1(:,:,:,user);
deviationb2all(:,:,:,user)=b2(:,:,:,user);
deviationb3all(:,:,:,user)=b3(:,:,:,user);
deviationb4all(:,:,user)=b4(:,:,user);
deviationb5all(:,:,user)= b5(:,:,user);

else
    
    
deviationw1all(:,:,:,:,user)= w1(:,:,:,:,user)-globalw1;
deviationw2all(:,:,:,:,user)=w2(:,:,:,:,user)-globalw2;
deviationw3all(:,:,:,:,user)= w3(:,:,:,:,user)-globalw3;
deviationw4all(:,:,user)=w4(:,:,user)-globalw4;
deviationw5all(:,:,user)=w5(:,:,user)-globalw5;

deviationb1all(:,:,:,user)=b1(:,:,:,user)-globalb1;
deviationb2all(:,:,:,user)=b2(:,:,:,user)-globalb2;
deviationb3all(:,:,:,user)=b3(:,:,:,user)-globalb3;
deviationb4all(:,:,user)=b4(:,:,user)-globalb4;
deviationb5all(:,:,user)= b5(:,:,user)-globalb5;    
        
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end

%%%%%%%%%%%%%%%%%%%%%%% user selection %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if proposed==1
    % number = number + 1;
    % result = mod(number, 15);
    % disp(result);

for jjj=1:1:usernumber %all deviations x user
    
gradient(jjj,1)=sum(sqrt(deviationw1all(:,:,:,:,jjj).^2),'all')+sum(sqrt(deviationw2all(:,:,:,:,jjj).^2),'all')+sum(sqrt(deviationw3all(:,:,:,:,jjj).^2),'all')...
                +sum(sqrt(deviationw4all(:,:,jjj).^2),'all')+sum(sqrt(deviationw5all(:,:,jjj).^2),'all')+sum(sqrt(deviationb1all(:,:,:,jjj).^2),'all')...
                +sum(sqrt(deviationb2all(:,:,:,jjj).^2),'all')+sum(sqrt(deviationb3all(:,:,:,jjj).^2),'all')...
                +sum(sqrt(deviationb4all(:,:,jjj).^2),'all')+sum(sqrt(deviationb5all(:,:,jjj).^2),'all');

% suma total de todos los gradientes
% gradiente is a vector of Usernumber columns and 1 row
end

 [xx,dex]=sort(gradient); % [sorted output (value), sort index]
 
 probability=gradient/sum(gradient); % prob por gradiente
     probabilityd=(max(d)-d)/sum(max(d)-d); % prob por distancia
     
   probability=probability*alpha+(1-alpha)*probabilityd; % prob conjunta
   
      vector=[1:1:usernumber];
      
      %Here it only selects 10/15 users
     for llll=1:1:numberofuser

    bb(i,llll)=randsrc(1,1,[vector; probability']); %inicializa bb, 
    % selecciona un elem de forma aleatoria (1,1) de vector.
    % las opciones de ser seleccionado vienen marcadas por probability'
    
    position=find(vector==bb(i,llll)); %finds index of the element in 'vect'
    % () that matches value stores in bb
    probability1=probability(position,1); % retreives prob associated
    probability(position)=[]; %removes the elem
    vector(position)=[]; % removes selected elem from vect
    probability=probability./(1-probability1);
    % maintain the probability distribution's integrity after an element 
    % has been removed.
    %end
     end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%






%%%%%%%%%%%%% reshape the gradient of local FL model of each user   %%%%%%%        

for code=1:1:numberofuser


deviationw1=deviationw1all(:,:,:,:,bb(i,code));
deviationw2=deviationw2all(:,:,:,:,bb(i,code));
deviationw3=deviationw3all(:,:,:,:,bb(i,code));
deviationw4=deviationw4all(:,:,bb(i,code));
deviationw5=deviationw5all(:,:,bb(i,code));

deviationb1=deviationb1all(:,:,:,bb(i,code));
deviationb2=deviationb2all(:,:,:,bb(i,code));
deviationb3=deviationb3all(:,:,:,bb(i,code));
deviationb4=deviationb4all(:,:,bb(i,code));
deviationb5=deviationb5all(:,:,bb(i,code));  
    
    
    
w1vector=reshape(deviationw1,[w1length,1]);

w2vector=reshape(deviationw2,[w2length,1]);

w3vector=reshape(deviationw3,[w3length,1]);

w4vector=reshape(deviationw4,[w4length,1]);

w5vector=reshape(deviationw5,[w5length,1]);   


b1vector=reshape(deviationb1,[b1length,1]);

b2vector=reshape(deviationb2,[b2length,1]);

b3vector=reshape(deviationb3,[b3length,1]);



    m_fH1 = [w1vector;w2vector;w3vector;w4vector;w5vector;...
             b1vector;b2vector;b3vector;deviationb4;deviationb5]; 
%    
   [m_fHhat1, ~] = m_fQuantizeData(m_fH1, s_fRate, stSettings); % coding and decoding
 
   bstart=w1length+w2length+w3length+w4length+w5length;
   
 %%%%%%%%%%%%%%%% reshape the gradient of the loss function after coding %%%%%%%%%%%%  
 deviationw1=reshape(m_fHhat1(1:w1length),[5,5,3,32]);
  deviationw2=reshape(m_fHhat1(w1length+1:w1length+w2length),[5,5,32,32]);
  deviationw3=reshape(m_fHhat1(w1length+w2length+1:w1length+w2length+w3length),[5,5,32,64]);
deviationw4=reshape(m_fHhat1(w1length+w2length+w3length+1:w1length+w2length+w3length+w4length),[64,576]);
deviationw5=reshape(m_fHhat1(w1length+w2length+w3length+w4length+1:bstart),[10,64]);

 deviationb1(1,1,:)=reshape(m_fHhat1(bstart+1:bstart+b1length),[1,1,32]);
  deviationb2(1,1,:)=reshape(m_fHhat1(bstart+b1length+1:bstart+b1length+b2length),[1,1,32]);
  deviationb3(1,1,:)=reshape(m_fHhat1(bstart+b1length+b2length+1:bstart+b1length+b2length+b3length),[1,1,64]);
deviationb4(:,1)=m_fHhat1(bstart+b1length+b2length+b3length+1:bstart+b1length+b2length+b3length+b4length);
deviationb5(:,1)=m_fHhat1(bstart+b1length+b2length+b3length+b4length+1:bstart+b1length+b2length+b3length+b4length+b5length);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


 %%%%%%%%%%%%%%%% calculate the local FL model of each user after coding %%%%%%%%%%%%  

    if i==1
   
   w1(:,:,:,:,bb(i,code))=deviationw1;
w2(:,:,:,:,bb(i,code))=deviationw2;
 w3(:,:,:,:,bb(i,code))=deviationw3;
w4(:,:,bb(i,code))=deviationw4;
w5(:,:,bb(i,code))=deviationw5;

b1(:,:,:,bb(i,code))=deviationb1;
b2(:,:,:,bb(i,code))=deviationb2;
b3(:,:,:,bb(i,code))=deviationb3;
b4(:,:,bb(i,code))=deviationb4;
b5(:,:,bb(i,code))=deviationb5;
              
    else       
      w1(:,:,:,:,bb(i,code))=deviationw1+globalw1;
w2(:,:,:,:,bb(i,code))=deviationw2+globalw2;
 w3(:,:,:,:,bb(i,code))=deviationw3+globalw3;
w4(:,:,bb(i,code))=deviationw4+globalw4;
w5(:,:,bb(i,code))=deviationw5+globalw5;

b1(:,:,:,bb(i,code))=deviationb1+globalb1;
b2(:,:,:,bb(i,code))=deviationb2+globalb2;
b3(:,:,:,bb(i,code))=deviationb3+globalb3;
b4(:,:,bb(i,code))=deviationb4+globalb4;
b5(:,:,bb(i,code))=deviationb5+globalb5;     
        
    end
    
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    











 %%%%%%%%%%%%%%%% update the global FL model  %%%%%%%%%%%%  
globalw1=1/numberofuser*sum(w1(:,:,:,:,bb(i,:)),5);  % global training model
globalw2=1/numberofuser*sum(w2(:,:,:,:,bb(i,:)),5);  % global training model
globalw3=1/numberofuser*sum(w3(:,:,:,:,bb(i,:)),5);
globalw4=1/numberofuser*sum(w4(:,:,bb(i,:)),3);

globalw5=1/numberofuser*sum(w5(:,:,bb(i,:)),3);

globalb1=1/numberofuser*sum(b1(:,:,:,bb(i,:)),4);  % global training model
globalb2=1/numberofuser*sum(b2(:,:,:,bb(i,:)),4);  % global training model
globalb3=1/numberofuser*sum(b3(:,:,:,bb(i,:)),4);
globalb4=1/numberofuser*sum(b4(:,:,bb(i,:)),3);

globalb5=1/numberofuser*sum(b5(:,:,bb(i,:)),3);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


 %%%%%%%%%%%%%%%%%%%%%%% Delay calculation %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 userconnectvector=zeros(1,usernumber);
 userconnectvector(1,bb(i,:))=1;

 iterationtime(i)=mindelay(userconnectvector,RBnumber,time);
 iterationtimerandom(i)=randomdelay(userconnectvector,RBnumber,time);

end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% UA %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


if baseline1==1
    
probability=ones(usernumber,1)/usernumber;
   
   
      vector=[1:1:usernumber];
     for llll=1:1:numberofuser

    bb(i,llll)=randsrc(1,1,[vector; probability']);
    
    position=find(vector==bb(i,llll));
    probability1=probability(position,1);
    probability(position)=[];
    vector(position)=[];
    probability=probability./(1-probability1);
    %end
     end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%% reshape the gradient of local FL model of each user%%%%%%%        

for code=1:1:numberofuser


 deviationw1=deviationw1all(:,:,:,:,bb(i,code));
deviationw2=deviationw2all(:,:,:,:,bb(i,code));
deviationw3=deviationw3all(:,:,:,:,bb(i,code));
deviationw4=deviationw4all(:,:,bb(i,code));
deviationw5=deviationw5all(:,:,bb(i,code));

deviationb1=deviationb1all(:,:,:,bb(i,code));
deviationb2=deviationb2all(:,:,:,bb(i,code));
deviationb3=deviationb3all(:,:,:,bb(i,code));
deviationb4=deviationb4all(:,:,bb(i,code));
deviationb5=deviationb5all(:,:,bb(i,code));  
    
    
    
w1vector=reshape(deviationw1,[w1length,1]);

w2vector=reshape(deviationw2,[w2length,1]);

w3vector=reshape(deviationw3,[w3length,1]);

w4vector=reshape(deviationw4,[w4length,1]);

w5vector=reshape(deviationw5,[w5length,1]);   


b1vector=reshape(deviationb1,[b1length,1]);

b2vector=reshape(deviationb2,[b2length,1]);

b3vector=reshape(deviationb3,[b3length,1]);



    m_fH1 = [w1vector;w2vector;w3vector;w4vector;w5vector;...
             b1vector;b2vector;b3vector;deviationb4;deviationb5]; 
%    
   [m_fHhat1, ~] = m_fQuantizeData(m_fH1, s_fRate, stSettings); % coding and decoding
 
   bstart=w1length+w2length+w3length+w4length+w5length;
   
 %%%%%%%%%%%%%%%% reshape the gradient of the loss function after coding %%%%%%%%%%%%  
 deviationw1=reshape(m_fHhat1(1:w1length),[5,5,3,32]);
  deviationw2=reshape(m_fHhat1(w1length+1:w1length+w2length),[5,5,32,32]);
  deviationw3=reshape(m_fHhat1(w1length+w2length+1:w1length+w2length+w3length),[5,5,32,64]);
deviationw4=reshape(m_fHhat1(w1length+w2length+w3length+1:w1length+w2length+w3length+w4length),[64,576]);
deviationw5=reshape(m_fHhat1(w1length+w2length+w3length+w4length+1:bstart),[10,64]);

 deviationb1(1,1,:)=reshape(m_fHhat1(bstart+1:bstart+b1length),[1,1,32]);
  deviationb2(1,1,:)=reshape(m_fHhat1(bstart+b1length+1:bstart+b1length+b2length),[1,1,32]);
  deviationb3(1,1,:)=reshape(m_fHhat1(bstart+b1length+b2length+1:bstart+b1length+b2length+b3length),[1,1,64]);
deviationw4(:,1)=m_fHhat1(bstart+b1length+b2length+b3length+1:bstart+b1length+b2length+b3length+b4length);
deviationw5(:,1)=m_fHhat1(bstart+b1length+b2length+b3length+b4length+1:bstart+b1length+b2length+b3length+b4length+b5length);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


 %%%%%%%%%%%%%%%% calculate the local FL model of each user after coding %%%%%%%%%%%%  

    if i==1
   
   w1(:,:,:,:,bb(i,code))=deviationw1;
w2(:,:,:,:,bb(i,code))=deviationw2;
 w3(:,:,:,:,bb(i,code))=deviationw3;
w4(:,:,bb(i,code))=deviationw4;
w5(:,:,bb(i,code))=deviationw5;

b1(:,:,:,bb(i,code))=deviationb1;
b2(:,:,:,bb(i,code))=deviationb2;
b3(:,:,:,bb(i,code))=deviationb3;
b4(:,:,bb(i,code))=deviationb4;
b5(:,:,bb(i,code))=deviationb5;
              
    else       
      w1(:,:,:,:,bb(i,code))=deviationw1+globalw1;
w2(:,:,:,:,bb(i,code))=deviationw2+globalw2;
 w3(:,:,:,:,bb(i,code))=deviationw3+globalw3;
w4(:,:,bb(i,code))=deviationw4+globalw4;
w5(:,:,bb(i,code))=deviationw5+globalw5;

b1(:,:,:,bb(i,code))=deviationb1+globalb1;
b2(:,:,:,bb(i,code))=deviationb2+globalb2;
b3(:,:,:,bb(i,code))=deviationb3+globalb3;
b4(:,:,bb(i,code))=deviationb4+globalb4;
b5(:,:,bb(i,code))=deviationb5+globalb5;     
        
    end
    
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    

 %%%%%%%%%%%%%%%% update the global FL model  %%%%%%%%%%%%  
globalw1=1/numberofuser*sum(w1(:,:,:,:,bb(i,:)),5);  % global training model
globalw2=1/numberofuser*sum(w2(:,:,:,:,bb(i,:)),5);  % global training model
globalw3=1/numberofuser*sum(w3(:,:,:,:,bb(i,:)),5);
globalw4=1/numberofuser*sum(w4(:,:,bb(i,:)),3);

globalw5=1/numberofuser*sum(w5(:,:,bb(i,:)),3);

globalb1=1/numberofuser*sum(b1(:,:,:,bb(i,:)),4);  % global training model
globalb2=1/numberofuser*sum(b2(:,:,:,bb(i,:)),4);  % global training model
globalb3=1/numberofuser*sum(b3(:,:,:,bb(i,:)),4);
globalb4=1/numberofuser*sum(b4(:,:,bb(i,:)),3);

globalb5=1/numberofuser*sum(b5(:,:,bb(i,:)),3);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


 %%%%%%%%%%%%%%%%%%%%%%% Delay calculation %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 userconnectvector=zeros(1,usernumber);
 userconnectvector(1,bb(i,:))=1;
  
 iterationtime(i)=mindelay(userconnectvector,RBnumber,time);
 iterationtimerandom(i)=randomdelay(userconnectvector,RBnumber,time);

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% baseline2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




if baseline2==1
    
for jjj=1:1:usernumber
gradient(jjj,1)=sum(sqrt(deviationw1all(:,:,:,:,jjj).^2),'all')+sum(sqrt(deviationw2all(:,:,:,:,jjj).^2),'all')+sum(sqrt(deviationw3all(:,:,:,:,jjj).^2),'all')...
                +sum(sqrt(deviationw4all(:,:,jjj).^2),'all')+sum(sqrt(deviationw5all(:,:,jjj).^2),'all')+sum(sqrt(deviationb1all(:,:,:,jjj).^2),'all')...
                +sum(sqrt(deviationb2all(:,:,:,jjj).^2),'all')+sum(sqrt(deviationb3all(:,:,:,jjj).^2),'all')...
                +sum(sqrt(deviationb4all(:,:,jjj).^2),'all')+sum(sqrt(deviationb5all(:,:,jjj).^2),'all');
end

 [xx,dex]=sort(gradient);
 
 probability=gradient/sum(gradient);
     probabilityd=(max(d)-d)/sum(max(d)-d);
     
   probability=probability*alpha+(1-alpha)*probabilityd;
   
      vector=[1:1:usernumber];
     for llll=1:1:numberofuser

    bb(i,llll)=randsrc(1,1,[vector; probability']);
    
    position=find(vector==bb(i,llll));
    probability1=probability(position,1);
    probability(position)=[];
    vector(position)=[];
    probability=probability./(1-probability1);
    %end
     end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%% update the global FL model  %%%%%%%%%%%%  
globalw1=1/numberofuser*sum(w1(:,:,:,:,bb(i,:)),5);  % global training model
globalw2=1/numberofuser*sum(w2(:,:,:,:,bb(i,:)),5);  % global training model
globalw3=1/numberofuser*sum(w3(:,:,:,:,bb(i,:)),5);
globalw4=1/numberofuser*sum(w4(:,:,bb(i,:)),3);

globalw5=1/numberofuser*sum(w5(:,:,bb(i,:)),3);

globalb1=1/numberofuser*sum(b1(:,:,:,bb(i,:)),4);  % global training model
globalb2=1/numberofuser*sum(b2(:,:,:,bb(i,:)),4);  % global training model
globalb3=1/numberofuser*sum(b3(:,:,:,bb(i,:)),4);
globalb4=1/numberofuser*sum(b4(:,:,bb(i,:)),3);

globalb5=1/numberofuser*sum(b5(:,:,bb(i,:)),3);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


 %%%%%%%%%%%%%%%%%%%%%%% Delay calculation %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 userconnectvector=zeros(1,usernumber);
 userconnectvector(1,bb(i,:))=1;
  
 iterationtime(i)=mindelay(userconnectvector,RBnumber,time);
 iterationtimerandom(i)=randomdelay(userconnectvector,RBnumber,time);

end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% baseline3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


if baseline3==1
    
probability=ones(usernumber,1)/usernumber;
   
   
      vector=[1:1:usernumber];
     for llll=1:1:numberofuser

    bb(i,llll)=randsrc(1,1,[vector; probability']);
    
    position=find(vector==bb(i,llll));
    probability1=probability(position,1);
    probability(position)=[];
    vector(position)=[];
    probability=probability./(1-probability1);
    %end
     end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

 %%%%%%%%%%%%%%%% update the global FL model  %%%%%%%%%%%%  
globalw1=1/numberofuser*sum(w1(:,:,:,:,bb(i,:)),5);  % global training model
globalw2=1/numberofuser*sum(w2(:,:,:,:,bb(i,:)),5);  % global training model
globalw3=1/numberofuser*sum(w3(:,:,:,:,bb(i,:)),5);
globalw4=1/numberofuser*sum(w4(:,:,bb(i,:)),3);

globalw5=1/numberofuser*sum(w5(:,:,bb(i,:)),3);

globalb1=1/numberofuser*sum(b1(:,:,:,bb(i,:)),4);  % global training model
globalb2=1/numberofuser*sum(b2(:,:,:,bb(i,:)),4);  % global training model
globalb3=1/numberofuser*sum(b3(:,:,:,bb(i,:)),4);
globalb4=1/numberofuser*sum(b4(:,:,bb(i,:)),3);

globalb5=1/numberofuser*sum(b5(:,:,bb(i,:)),3);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


 %%%%%%%%%%%%%%%%%%%%%%% Delay calculation %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 userconnectvector=zeros(1,usernumber);
 userconnectvector(1,bb(i,:))=1;
  
 iterationtime(i)=mindelay(userconnectvector,RBnumber,time);
 iterationtimerandom(i)=randomdelay(userconnectvector,RBnumber,time);

end








%%%%%%%% without coding and encoding 
% 
% wglobal(i,:)=1/usernumber*sum(w,2);  % global training model
% lwglobal(i,:)=1/usernumber*sum(lw,2);  % global training model
% bglobal(i,:)=1/usernumber*sum(b,2);
% obglobal(i,:)=1/usernumber*sum(ob,2);


%tmp_net = netvaluable.saveobj;

% netvaluable.Layers(2).Weights =globalw1;
% tmp_net.Layers(5).Weights =globalw2;
% tmp_net.Layers(8).Weights =globalw3;
% tmp_net.Layers(11).Weights =globalw4;
% tmp_net.Layers(13).Weights =globalw5;
% 
% tmp_net.Layers(2).Bias =globalb1;
% tmp_net.Layers(5).Bias =globalb2;
% tmp_net.Layers(8).Bias =globalb3;
% tmp_net.Layers(11).Bias =globalb4;
% tmp_net.Layers(13).Bias =globalb5;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

error(i,1)=error(i,1)/usernumber; %%%% calculate the final error
 end
averageerror(average,kk)=error(iteration);
 %  end
averagedelay(average,kk)=sum(iterationtime);
averagedelayrandom(average,kk)=sum(iterationtimerandom);

display(i);
end
finalerror(kk,1)=sum(averageerror(:,kk))/averagenumber;
finaldelay(kk,1)=sum(averagedelay(:,kk))/averagenumber;
finaldelayrandom(kk,1)=sum(averagedelayrandom(:,kk))/averagenumber;
end

save CIFARresultbaseline3 error  finalerror finaldelay finaldelayrandom d